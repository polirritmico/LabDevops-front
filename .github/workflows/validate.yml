name: "1. Validations"

on:
  push:
    branches: ["main", "develop"]

permissions:
  contents: read
  checks: write
  pull-requests: write
  packages: write
  id-token: write
  pages: write
  security-events: write

concurrency:
  group: release-${{ github.event.workflow_run.head_sha }}
  cancel-in-progress: false

jobs:
  check-lintern:
    name: "1. Ruff lint"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python 3.13
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v7

      - name: Install dependencies
        run: uv sync --frozen --group lint

      - name: Check Ruff lintern compliance
        run: uv run ruff check .

  check-formatter:
    name: "2. Formatter check"
    needs: check-lintern
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python 3.13
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v7

      - name: Install dependencies
        run: uv sync --frozen --group lint

      - name: Check Black formatter compliance
        run: uv run black --check .

  check-tests:
    name: "3. Check all tests pass"
    needs: check-formatter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python 3.13
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v7

      - name: Install dependencies
        run: uv sync --frozen --group tests

      - name: Run pytest with coverage
        env:
          COVERAGE_THRESHOLD: ${{ vars.COVERAGE_THRESHOLD }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          DJANGO_SETTINGS_MODULE: devopsdemo.settings
        run: |
          uv run pytest \
            --cov=devopsdemo \
            --cov=web \
            --cov-report=xml \
            --junitxml=report.xml \
            --cov-fail-under=${COVERAGE_THRESHOLD}

      - name: Upload coverage report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            report.xml
            coverage.xml
          if-no-files-found: ignore

      - name: Publish test results
        if: always()
        uses: mikepenz/action-junit-report@v5
        with:
          report_paths: report.xml
          check_name: "Pytest Results"
          detailed_summary: true

  snyk-analysis:
    name: "4. Synk Security Scan"
    needs: check-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python 3.13
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v7

      - name: Install all dependencies and generate requirements.txt
        run: |
          uv sync --frozen
          uv export --format=requirements.txt > requirements.txt

      - name: Snyk Setup
        uses: snyk/actions/setup@master

      - name: Install dependencies for Snyk (uv workaround)
        run: pip install -r requirements.txt

      - name: Run Snyk (pip fallback)
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk test \
            --file=requirements.txt \
            --sarif-file-output=snyk.sarif \
            --json-file-output=snyk.json \
            --severity-threshold=high \
            --fail-on=upgradable \
            --no-root

      - name: Upload Snyk SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

      - name: Upload Snyk JSON report artifact
        uses: actions/upload-artifact@v4
        with:
          name: snyk-json-report
          path: snyk.json
          if-no-files-found: ignore

      - name: Display JSON summary
        if: always()
        run: |
          TOTAL=$(jq '.vulnerabilities | length' snyk.json 2>/dev/null || echo 0)
          {
            echo "### Snyk Vulnerabilities Summary"
            echo ""
            echo "- **Total:** $TOTAL"
          } >> "$GITHUB_STEP_SUMMARY"

          for level in critical high medium low; do
            COUNT=$(jq "[.vulnerabilities[] | select(.severity==\"$level\") ] | length" snyk.json 2>/dev/null || echo 0)
            echo "- **${level^}:** $COUNT" >> "$GITHUB_STEP_SUMMARY"
          done

          FAIL_COUNT=$(jq '[.vulnerabilities[] | select(.severity=="high" or .severity=="critical")] | length' snyk.json 2>/dev/null || echo 0)
          if [ "$FAIL_COUNT" -gt 0 ]; then
            echo "High/Critical vulnerabilities detected!"
            exit 1
          fi

  sonar-analysis:
    name: "5. SonarQube Static Analysis"
    needs: check-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python 3.13
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v7

      - name: Install dependencies
        run: uv sync --frozen --group sonar

      - name: Run SonarCloud Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          uv run pysonar \
            -Dsonar.branch.name=${{ github.ref_name }} \
            -Dsonar.token="${SONAR_TOKEN}" \
            -Dsonar.python.coverage.reportPaths=coverage.xml || exit $?
